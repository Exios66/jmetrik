package com.itemanalysis.jmetrik.gui;

import com.itemanalysis.jmetrik.sql.DataTableName;
import com.itemanalysis.jmetrik.sql.DatabaseName;
import com.itemanalysis.jmetrik.swing.ExtensionFileFilter;
import com.itemanalysis.jmetrik.workspace.ExportSpssCommand;
import com.itemanalysis.jmetrik.workspace.ImportSpssCommand;
import com.itemanalysis.jmetrik.workspace.JmetrikPreferencesManager;
import org.apache.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

public class ExportSpssDialog extends JDialog {

    // Variables declaration - do not modify
    private JButton browseFileButton;
    private JButton browsePluginButton;
    private JButton cancelButton;
    private JButton exportButton;
    private JRadioButton originalDataRadioButton;
    private JLabel pluginLabel;
    private JTextField pluginTextField;
    private JRadioButton scoredItemsRadioButton;
    private JLabel spssFileLabel;
    private JTextField spssFileTextField;
    private JPanel valueLabelPanel;
    private ButtonGroup dataTypeButtonGroup;
    // End of variables declaration

    private DatabaseName dbName = null;
    private DataTableName tableName = null;
    private String currentDirectory  = "";
    private boolean canRun = false;
    private JFileChooser exportChooser = null;
    private JFileChooser pluginPathChooser = null;
    private ExportSpssCommand command = null;
    private JmetrikPreferencesManager prefs = null;
    private String currentPluginPath = "";
    static Logger logger = Logger.getLogger("jmetrik-logger");

    /**
     * Creates new form ImportSpssDialog
     */
    public ExportSpssDialog(Jmetrik parent, DatabaseName dbName, DataTableName tableName, String currentDirectory) {
        super(parent,"Export SPSS File",true);
        this.dbName = dbName;
        this.tableName = tableName;
        this.currentDirectory = currentDirectory;

        //prevent running an analysis when window close button is clicked
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                canRun = false;
            }
        });

        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        initComponents();
        getPluginPathFromPreferences();
        setResizable(false);
        setLocationRelativeTo(parent);
    }

    private void getPluginPathFromPreferences(){
        prefs = new JmetrikPreferencesManager();
        currentPluginPath = prefs.getSpssPluginPath();
        if(!"".equals(currentPluginPath)){
            pluginTextField.setText(currentPluginPath);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        dataTypeButtonGroup = new ButtonGroup();
        spssFileTextField = new JTextField();
        spssFileTextField.setText(tableName.toString().trim()+".sav");
        spssFileLabel = new JLabel();
        browseFileButton = new JButton();
        valueLabelPanel = new JPanel();
        originalDataRadioButton = new JRadioButton();
        scoredItemsRadioButton = new JRadioButton();
        exportButton = new JButton();
        cancelButton = new JButton();
        pluginLabel = new JLabel();
        pluginTextField = new JTextField();
        browsePluginButton = new JButton();

        setPreferredSize(new java.awt.Dimension(460, 210));

        spssFileTextField.setPreferredSize(new Dimension(300, 28));

        originalDataRadioButton.setActionCommand("data");
        scoredItemsRadioButton.setActionCommand("scored");

        spssFileLabel.setText("SPSS File:");

        browseFileButton.setText("Browse");
        browseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        valueLabelPanel.setBorder(BorderFactory.createTitledBorder("Export original data or scored items?"));

        dataTypeButtonGroup.add(originalDataRadioButton);
        originalDataRadioButton.setSelected(true);
        originalDataRadioButton.setText("Original data");
        originalDataRadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                dataRadioButtonActionPerformed(evt);
            }
        });
        originalDataRadioButton.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                originalDataRadioButtonPropertyChange(evt);
            }
        });

        dataTypeButtonGroup.add(scoredItemsRadioButton);
        scoredItemsRadioButton.setText("Scored items");
        scoredItemsRadioButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                scoredItemsRadioButtonActionPerformed(evt);
            }
        });

        GroupLayout valueLabelPanelLayout = new GroupLayout(valueLabelPanel);
        valueLabelPanel.setLayout(valueLabelPanelLayout);
        valueLabelPanelLayout.setHorizontalGroup(
                valueLabelPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(valueLabelPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(originalDataRadioButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scoredItemsRadioButton)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        valueLabelPanelLayout.setVerticalGroup(
                valueLabelPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(valueLabelPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(originalDataRadioButton)
                                .addComponent(scoredItemsRadioButton))
        );

        exportButton.setText("Export");
        exportButton.setActionCommand("Export");
        exportButton.setPreferredSize(new java.awt.Dimension(72, 28));
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        cancelButton.setLabel("Cancel");
        cancelButton.setPreferredSize(new Dimension(72, 28));
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        pluginLabel.setText("Plugin:");

        pluginTextField.setPreferredSize(new Dimension(300, 28));

        browsePluginButton.setText("Browse");
        browsePluginButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                pluginButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(spssFileLabel)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(spssFileTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(browseFileButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(pluginLabel)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(exportButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(valueLabelPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(pluginTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(browsePluginButton)))))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(spssFileTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(spssFileLabel)
                                        .addComponent(browseFileButton))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(pluginTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pluginLabel)
                                        .addComponent(browsePluginButton))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(valueLabelPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(exportButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>

    public boolean canRun(){
        return canRun;
    }

    public String getCurrentDirectory(){
        return currentDirectory;
    }

    public ExportSpssCommand getCommand(){
        return command;
    }

    private void browseButtonActionPerformed(ActionEvent evt) {
        if(null==exportChooser){
            exportChooser = new JFileChooser();
            String description = "SPSS Files (*.sav)";
            String[] extension = {"sav"};
            ExtensionFileFilter filter = new ExtensionFileFilter(description, extension);

            exportChooser.setAcceptAllFileFilterUsed(true);
            exportChooser.addChoosableFileFilter(filter);
            exportChooser.setFileFilter(filter);
            exportChooser.setDialogType(JFileChooser.SAVE_DIALOG);
            exportChooser.setDialogTitle("Export as SPSS File");
            exportChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            exportChooser.setSelectedFile(new File(spssFileTextField.getText()));
        }

        exportChooser.setVisible(true);

        if(exportChooser.showDialog(ExportSpssDialog.this, "OK") != JFileChooser.APPROVE_OPTION){
            return;
        }

        File f=exportChooser.getSelectedFile();
        exportChooser.setCurrentDirectory(f);
        spssFileTextField.setText(f.getAbsolutePath());

    }

    private void pluginButtonActionPerformed(ActionEvent evt) {
        if(null==pluginPathChooser){
            pluginPathChooser = new JFileChooser();
            String description = "Java Files (*.jar)";
            String[] extension = {"jar"};
            ExtensionFileFilter filter = new ExtensionFileFilter(description, extension);

            pluginPathChooser.setAcceptAllFileFilterUsed(true);
            pluginPathChooser.addChoosableFileFilter(filter);
            pluginPathChooser.setFileFilter(filter);
            pluginPathChooser.setDialogType(JFileChooser.OPEN_DIALOG);
            pluginPathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            pluginPathChooser.setDialogTitle("Path to SPSS Plugin");
        }

        pluginPathChooser.setVisible(true);

        if(pluginPathChooser.showDialog(ExportSpssDialog.this, "OK")!=JFileChooser.APPROVE_OPTION){
            return;
        }

        File f=pluginPathChooser.getCurrentDirectory();
        pluginPathChooser.setCurrentDirectory(f);
        pluginTextField.setText(f.getAbsolutePath());

    }

    private void originalDataRadioButtonPropertyChange(PropertyChangeEvent evt) {
        // TODO add your handling code here:
    }

    private void browsePluginButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void exportButtonActionPerformed(ActionEvent evt) {
        File f = new File(pluginTextField.getText().trim());

        if(!f.exists()){
            JOptionPane.showMessageDialog(
                    ExportSpssDialog.this,
                    "The required plugin was not found. Importing an SPSS file requires\n" +
                            "a licensed copy of IBM SPSS. If you have a licensed copy, make\n" +
                            "sure this path points to the location of the 'spssjavaplugin.jar'\n"+
                            "file. On a Windows machine this file is located in the IBM SPSS\n"+
                            "installation directory. On Mac OSX it is located in the bin directory\n"+
                            "under the Content directory in the IBM SPSS Statistics application\n"+
                            "bundle. On Linux and UNIX it is located in the bin directory under\n"+
                            "the IBM SPSS Statistics installation directory.",
                    "SPSS Plugin Error",
                    JOptionPane.ERROR_MESSAGE);
        }else if(spssFileTextField.getText().trim().equals("")){
            JOptionPane.showMessageDialog(
                    ExportSpssDialog.this,
                    "Please type a name for the file to export.",
                    "Export Data File Error",
                    JOptionPane.ERROR_MESSAGE);
        }else if(pluginTextField.getText().trim().equals("")){
            JOptionPane.showMessageDialog(
                    ExportSpssDialog.this,
                    "Please type the path to the SPSS plugin.",
                    "SPSS Plugin Not Found.",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            command = new ExportSpssCommand();

            command.getPairedOptionList("data").addValue("db", dbName.getName());
            command.getPairedOptionList("data").addValue("table", tableName.toString());

            command.getFreeOption("file").add(spssFileTextField.getText().trim());
            command.getFreeOption("pluginpath").add(f.getAbsolutePath());

            String temp = dataTypeButtonGroup.getSelection().getActionCommand();
            if("scored".equals(temp.trim())){
                command.getSelectAllOption("options").setSelected("scored", true);
            }

            if(!currentPluginPath.equals(f.getAbsolutePath())){
                prefs.setSpssPluginPath(f.getAbsolutePath());
            }

            canRun = true;
            String path = f.getAbsolutePath().toString();
            path = path.replaceAll("\\\\", "/");
            path = path.substring(0, path.lastIndexOf("/"));
            currentDirectory = path;

            setVisible(false);

        }
    }

    private void cancelButtonActionPerformed(ActionEvent evt) {
        canRun=false;
        setVisible(false);
    }

    private void dataRadioButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void scoredItemsRadioButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }



}

